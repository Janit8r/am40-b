name: Build RK3399 AM40 DTB files for kernel 6.14.5

on:
  push:
    paths:
      - '**.dts'
      - '**.dtsi'
      - '.github/workflows/build-dtb-only.yml'
  pull_request:
    paths:
      - '**.dts'
      - '**.dtsi'
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Linux kernel version'
        required: true
        default: '6.14.5'

jobs:
  build-dtb:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install required packages
      run: sudo apt-get update && sudo apt-get install -y device-tree-compiler wget

    - name: Create build environment
      run: |
        mkdir -p build
        mkdir -p include/linux
        
        # Generate minimal linux-event-codes.h
        cat > include/linux/input-event-codes.h << 'EOF'
        /* 
         * Minimal Linux input event codes for device tree compilation
         * Extracted from Linux kernel
         */
        #ifndef _LINUX_INPUT_EVENT_CODES_H
        #define _LINUX_INPUT_EVENT_CODES_H

        /* Key definitions */
        #define KEY_RESERVED		0
        #define KEY_ESC			1
        #define KEY_1			2
        #define KEY_2			3
        #define KEY_3			4
        #define KEY_4			5
        #define KEY_5			6
        #define KEY_6			7
        #define KEY_7			8
        #define KEY_8			9
        #define KEY_9			10
        #define KEY_0			11
        #define KEY_MINUS		12
        #define KEY_EQUAL		13
        #define KEY_BACKSPACE		14
        #define KEY_TAB			15
        #define KEY_Q			16
        #define KEY_W			17
        #define KEY_E			18
        #define KEY_R			19
        #define KEY_T			20
        #define KEY_Y			21
        #define KEY_U			22
        #define KEY_I			23
        #define KEY_O			24
        #define KEY_P			25
        #define KEY_LEFTBRACE		26
        #define KEY_RIGHTBRACE		27
        #define KEY_ENTER		28
        #define KEY_LEFTCTRL		29
        #define KEY_A			30
        #define KEY_S			31
        #define KEY_D			32
        #define KEY_F			33
        #define KEY_G			34
        #define KEY_H			35
        #define KEY_J			36
        #define KEY_K			37
        #define KEY_L			38
        #define KEY_SEMICOLON		39
        #define KEY_APOSTROPHE		40
        #define KEY_GRAVE		41
        #define KEY_LEFTSHIFT		42
        #define KEY_BACKSLASH		43
        #define KEY_Z			44
        #define KEY_X			45
        #define KEY_C			46
        #define KEY_V			47
        #define KEY_B			48
        #define KEY_N			49
        #define KEY_M			50
        #define KEY_COMMA		51
        #define KEY_DOT			52
        #define KEY_SLASH		53
        #define KEY_RIGHTSHIFT		54
        #define KEY_KPASTERISK		55
        #define KEY_LEFTALT		56
        #define KEY_SPACE		57
        #define KEY_CAPSLOCK		58
        #define KEY_F1			59
        #define KEY_F2			60
        #define KEY_F3			61
        #define KEY_F4			62
        #define KEY_F5			63
        #define KEY_F6			64
        #define KEY_F7			65
        #define KEY_F8			66
        #define KEY_F9			67
        #define KEY_F10			68
        #define KEY_POWER		116

        /* GPIO definitions */
        #define GPIO_ACTIVE_HIGH 0
        #define GPIO_ACTIVE_LOW 1

        #endif /* _LINUX_INPUT_EVENT_CODES_H */
        EOF
        
        # Create symlink to make it accessible as linux-event-codes.h
        ln -sf include/linux/input-event-codes.h include/linux-event-codes.h

    - name: Download kernel headers
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        echo "Downloading Linux kernel ${KERNEL_VERSION}..."
        wget -q https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
        
        # Extract the entire kernel source to a temp directory and check its structure
        mkdir -p kernel-temp
        echo "Extracting kernel source..."
        tar -xf linux-${KERNEL_VERSION}.tar.xz -C kernel-temp --strip-components=1
        
        # Copy essential include directories
        echo "Copying kernel headers..."
        cp -r kernel-temp/include/dt-bindings include/
        
        # Copy additional Linux headers that might be needed
        mkdir -p include/linux
        if [ -f "kernel-temp/include/linux/input-event-codes.h" ]; then
          cp kernel-temp/include/linux/input-event-codes.h include/linux/
          # Create symlink for the old name
          ln -sf linux/input-event-codes.h include/linux-event-codes.h
        fi
        
        if [ -f "kernel-temp/include/uapi/linux/input-event-codes.h" ]; then
          mkdir -p include/uapi/linux
          cp kernel-temp/include/uapi/linux/input-event-codes.h include/uapi/linux/
          # Create symlink for the old name
          ln -sf uapi/linux/input-event-codes.h include/linux-event-codes.h
        fi
        
        # Clean up
        rm -rf kernel-temp linux-${KERNEL_VERSION}.tar.xz
        
        # Verify the include directory
        echo "Verifying include directory contents:"
        find include -type f | sort

    - name: Prepare DTS includes
      run: |
        # Create minimal versions of common header files if they don't exist
        if [ ! -f "include/linux-event-codes.h" ] && [ ! -f "include/linux/input-event-codes.h" ]; then
          echo "Creating minimal input-event-codes.h..."
          mkdir -p include/linux
          cat > include/linux/input-event-codes.h << 'EOF'
        #ifndef _LINUX_INPUT_EVENT_CODES_H
        #define _LINUX_INPUT_EVENT_CODES_H

        /* Just the keys we need for Batocera */
        #define KEY_POWER        116
        #define KEY_MUTE         113
        #define KEY_VOLUMEUP     115
        #define KEY_VOLUMEDOWN   114
        #define KEY_ESC          1
        #define KEY_1            2
        #define KEY_2            3
        #define KEY_3            4
        #define KEY_4            5
        #define KEY_5            6

        #endif
        EOF
          ln -sf linux/input-event-codes.h include/linux-event-codes.h
        fi
        
        # Create pwm.h if it doesn't exist
        if [ ! -f "include/dt-bindings/pwm/pwm.h" ]; then
          echo "Creating minimal pwm.h..."
          mkdir -p include/dt-bindings/pwm
          cat > include/dt-bindings/pwm/pwm.h << 'EOF'
        #ifndef _DT_BINDINGS_PWM_PWM_H
        #define _DT_BINDINGS_PWM_PWM_H

        #define PWM_POLARITY_NORMAL  0
        #define PWM_POLARITY_INVERSED 1

        #endif
        EOF
        fi
        
        # Create gpio.h if it doesn't exist
        if [ ! -f "include/dt-bindings/gpio/gpio.h" ]; then
          echo "Creating minimal gpio.h..."
          mkdir -p include/dt-bindings/gpio
          cat > include/dt-bindings/gpio/gpio.h << 'EOF'
        #ifndef _DT_BINDINGS_GPIO_GPIO_H
        #define _DT_BINDINGS_GPIO_GPIO_H

        /* GPIO Active states */
        #define GPIO_ACTIVE_HIGH 0
        #define GPIO_ACTIVE_LOW  1

        #endif
        EOF
        fi
        
        # Create input.h if it doesn't exist
        if [ ! -f "include/dt-bindings/input/input.h" ]; then
          echo "Creating minimal input.h..."
          mkdir -p include/dt-bindings/input
          cat > include/dt-bindings/input/input.h << 'EOF'
        #ifndef _DT_BINDINGS_INPUT_INPUT_H
        #define _DT_BINDINGS_INPUT_INPUT_H

        #include "linux-event-codes.h"

        #endif
        EOF
        fi
        
        # Show final include structure
        echo "Final include directory structure:"
        find include -type f | sort

    - name: Clean DTS files
      run: |
        echo "Preprocessing DTS files..."
        cpp -nostdinc -I. -I./include -undef -x assembler-with-cpp am40-user.dts build/am40-user.preprocessed.dts
        
        # Show the preprocessed file for debugging
        echo "Showing first 20 lines of preprocessed file:"
        head -n 20 build/am40-user.preprocessed.dts

    - name: Compile DTB file
      run: |
        echo "Compiling DTB from preprocessed DTS..."
        dtc -I dts -O dtb -o build/am40-user.dtb build/am40-user.preprocessed.dts
        ls -la build/

    - name: Create directory structure for package
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        mkdir -p dtb-package/boot/dtbs/${KERNEL_VERSION}/rockchip
        cp build/am40-user.dtb dtb-package/boot/dtbs/${KERNEL_VERSION}/rockchip/

    - name: Create install script
      run: |
        cat > dtb-package/install.sh << 'EOF'
        #!/bin/bash
        set -e

        # Script to install AM40 DTB files to Batocera
        echo "AM40 RK3399 Batocera DTB installer for kernel 6.14.5"

        # Check if running as root
        if [ "$(id -u)" -ne 0 ]; then
            echo "This script must be run as root" 
            exit 1
        fi

        # Configuration
        BATOCERA_BOOT="/boot"
        BATOCERA_DTB_DIR="$BATOCERA_BOOT/boot/dtbs"
        KERNEL_VERSION="6.14.5"

        # Find correct DTB directory based on kernel version
        if [ -d "$BATOCERA_DTB_DIR/$KERNEL_VERSION" ]; then
            DTB_VERSION_DIR="$BATOCERA_DTB_DIR/$KERNEL_VERSION"
        elif [ -d "$BATOCERA_DTB_DIR/6.14" ]; then
            DTB_VERSION_DIR="$BATOCERA_DTB_DIR/6.14"
            KERNEL_VERSION="6.14"
        else
            echo "Could not find kernel 6.14.5 DTB directory. Are you using the correct kernel version?"
            echo "Available kernel DTB directories:"
            ls -la "$BATOCERA_DTB_DIR"
            exit 1
        fi

        # Create the rockchip directory if it does not exist
        ROCKCHIP_DTB_DIR="$DTB_VERSION_DIR/rockchip"
        mkdir -p "$ROCKCHIP_DTB_DIR"

        # Backup existing DTB files
        echo "Backing up existing DTB files..."
        if [ -f "$ROCKCHIP_DTB_DIR/am40-user.dtb" ]; then
            cp "$ROCKCHIP_DTB_DIR/am40-user.dtb" "$ROCKCHIP_DTB_DIR/am40-user.dtb.backup"
        fi

        # Copy the custom DTB file
        echo "Installing custom DTB file..."
        cp "boot/dtbs/$KERNEL_VERSION/rockchip/am40-user.dtb" "$ROCKCHIP_DTB_DIR/"

        # Update the extlinux.conf file if needed
        EXTLINUX_CONF="$BATOCERA_BOOT/extlinux/extlinux.conf"
        if [ -f "$EXTLINUX_CONF" ]; then
            echo "Updating boot configuration..."
            # Check if the FDT line is already set to our DTB
            if grep -q "FDT /boot/dtbs/.*/rockchip/am40-user.dtb" "$EXTLINUX_CONF"; then
                echo "Boot configuration already set to use am40-user.dtb"
            else
                # Make a backup of the original file
                cp "$EXTLINUX_CONF" "$EXTLINUX_CONF.backup"
                
                # Update the FDT line to use our DTB
                sed -i "s|FDT .*|FDT /boot/dtbs/$KERNEL_VERSION/rockchip/am40-user.dtb|g" "$EXTLINUX_CONF"
                
                echo "Updated boot configuration to use am40-user.dtb"
            fi
        fi

        echo "Installation complete. Please reboot your system for changes to take effect."
        echo "If the system fails to boot, you can restore the backup DTB files by booting in recovery mode."
        EOF
        chmod +x dtb-package/install.sh

    - name: Create README
      run: |
        cat > dtb-package/README.md << 'EOF'
        # AM40 RK3399 DTB files for Batocera Linux 6.14.5

        This package contains the custom Device Tree Binary (DTB) files for running Batocera Linux with kernel 6.14.5 on the AM40 RK3399 board.

        ## Installation

        1. Extract this package to a USB drive or directly to your Batocera system
        2. Run the install script as root:
           ```
           chmod +x install.sh
           sudo ./install.sh
           ```
        3. Reboot your system

        ## Manual Installation

        If you prefer to install manually:

        1. Copy the DTB file to the correct location:
           ```
           sudo cp boot/dtbs/6.14.5/rockchip/am40-user.dtb /boot/boot/dtbs/6.14.5/rockchip/
           ```
           
        2. Update your boot configuration in `/boot/extlinux/extlinux.conf` to use the new DTB:
           ```
           FDT /boot/dtbs/6.14.5/rockchip/am40-user.dtb
           ```

        3. Reboot your system

        ## Recovery

        If your system fails to boot after installing these files, boot in recovery mode and restore the original DTB files from the backup.
        EOF

    - name: Create DTB package
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        cd dtb-package
        tar -czf ../build/am40-dtb-${KERNEL_VERSION}.tar.gz .
        cd ..
        ls -la build/

    - name: Upload DTB artifacts
      uses: actions/upload-artifact@v4
      with:
        name: am40-dtb-files
        path: |
          build/am40-user.dtb
          build/am40-dtb-*.tar.gz
        retention-days: 7

    - name: Create Release
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: AM40 DTB files for kernel ${{ github.event.inputs.kernel_version || '6.14.5' }}
        tag_name: dtb-v${{ github.event.inputs.kernel_version || '6.14.5' }}
        draft: false
        prerelease: false
        files: |
          build/am40-user.dtb
          build/am40-dtb-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
