name: Build RK3399 AM40 DTB files for kernel 6.14.5

on:
  push:
    paths:
      - '**.dts'
      - '**.dtsi'
      - '.github/workflows/build-dtb-only.yml'
  pull_request:
    paths:
      - '**.dts'
      - '**.dtsi'
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Linux kernel version'
        required: true
        default: '6.14.5'

# 添加权限配置
permissions:
  contents: write
  packages: write
  
jobs:
  build-dtb:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install required packages
      run: sudo apt-get update && sudo apt-get install -y device-tree-compiler wget

    - name: Create build directories
      run: |
        mkdir -p build
        mkdir -p include/linux
        mkdir -p arch/arm64/boot/dts/rockchip

    - name: Download kernel source
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        echo "Downloading Linux kernel ${KERNEL_VERSION}..."
        wget -q https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
        
        echo "Extracting kernel source..."
        tar -xf linux-${KERNEL_VERSION}.tar.xz
        
        echo "Listing key directories from kernel source:"
        ls -la linux-${KERNEL_VERSION}/arch/arm64/boot/dts/rockchip/
        
        echo "Copying all Rockchip DTS files (not just RK3399)..."
        cp linux-${KERNEL_VERSION}/arch/arm64/boot/dts/rockchip/*.dtsi arch/arm64/boot/dts/rockchip/ || true
        cp linux-${KERNEL_VERSION}/arch/arm64/boot/dts/rockchip/*.h arch/arm64/boot/dts/rockchip/ || true
        
        echo "Copying base ARM64 DTS include files..."
        mkdir -p arch/arm64/boot/dts/include
        cp -r linux-${KERNEL_VERSION}/arch/arm64/boot/dts/include/* arch/arm64/boot/dts/include/ || true
        
        echo "Copying dt-bindings..."
        cp -r linux-${KERNEL_VERSION}/include/dt-bindings include/
        
        echo "Copying Linux header files..."
        mkdir -p include/uapi/linux
        cp -r linux-${KERNEL_VERSION}/include/linux include/
        cp -r linux-${KERNEL_VERSION}/include/uapi/linux/input*.h include/uapi/linux/ || true
        
        echo "Creating symlinks..."
        ln -sf ../../include include/dt-bindings
        ln -sf ../../include/linux include/linux
        ln -sf ../include/uapi include/uapi
        
        echo "Double-checking critical files..."
        if [ ! -f "arch/arm64/boot/dts/rockchip/rk3399.dtsi" ]; then
          echo "WARNING: rk3399.dtsi is missing, looking deeper..."
          find linux-${KERNEL_VERSION} -name "rk3399.dtsi" -type f
          # Try to find it directly
          RK3399_DTSI=$(find linux-${KERNEL_VERSION} -name "rk3399.dtsi" -type f | head -1)
          if [ ! -z "$RK3399_DTSI" ]; then
            echo "Found $RK3399_DTSI, copying to our directory..."
            cp "$RK3399_DTSI" arch/arm64/boot/dts/rockchip/
          fi
        fi
        
        echo "Cleaning up source archive..."
        rm -f linux-${KERNEL_VERSION}.tar.xz
        
        echo "Final directory structure for RK3399 DTS files:"
        find arch -type f
        
        echo "Final include structure:"
        find include -type d | sort
        
        # 完成文件复制后清理
        echo "Final cleanup of kernel source..."
        rm -rf linux-${KERNEL_VERSION}

    - name: Create Android DTSI file
      run: |
        if [ ! -f "arch/arm64/boot/dts/rockchip/rk3399-android.dtsi" ]; then
          echo "Creating RK3399 Android DTSI file..."
          mkdir -p arch/arm64/boot/dts/rockchip
          echo "/* " > arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo " * Minimal RK3399 Android DTSI for compilation" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo " */" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "#ifndef __DTS_ARM64_ROCKCHIP_RK3399_ANDROID_H" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "#define __DTS_ARM64_ROCKCHIP_RK3399_ANDROID_H" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "/ {" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "    /* Minimal definitions for Android requirements */" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "    compatible = \"rockchip,android\", \"rockchip,rk3399\";" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "};" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
          echo "#endif" >> arch/arm64/boot/dts/rockchip/rk3399-android.dtsi
        fi

    - name: Create OPP DTSI file
      run: |
        if [ ! -f "arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi" ]; then
          echo "Creating RK3399 OPP DTSI file..."
          mkdir -p arch/arm64/boot/dts/rockchip
          echo "/*" > arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo " * Minimal RK3399 OPP DTSI for compilation" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo " */" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "#ifndef __DTS_ARM64_ROCKCHIP_RK3399_OPP_H" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "#define __DTS_ARM64_ROCKCHIP_RK3399_OPP_H" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "/ {" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "    /* Minimal definitions for OPP table */" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "    cpu_l0: cpu@0 {" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "        device_type = \"cpu\";" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "        compatible = \"arm,cortex-a53\";" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "        reg = <0x0 0x0>;" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "        operating-points-v2 = <&cluster0_opp>;" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "    };" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "    " >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "    cluster0_opp: opp-table0 {" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "        compatible = \"operating-points-v2\";" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "        opp-shared;" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "    };" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "};" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
          echo "#endif" >> arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi
        fi

    - name: Create modified DTS files
      run: |
        echo "Creating modified DTS files with corrected include paths..."
        
        # Update includes in rk3399-am40.dtsi - 使用相对路径
        echo "#include <dt-bindings/pwm/pwm.h>" > rk3399-am40-modified.dtsi
        echo "#include <dt-bindings/input/input.h>" >> rk3399-am40-modified.dtsi
        echo "#include \"./arch/arm64/boot/dts/rockchip/rk3399.dtsi\"" >> rk3399-am40-modified.dtsi
        echo "#include \"./arch/arm64/boot/dts/rockchip/rk3399-android.dtsi\"" >> rk3399-am40-modified.dtsi
        echo "#include \"./arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi\"" >> rk3399-am40-modified.dtsi
        
        # 处理和修复原始DTSI文件中的潜在语法错误
        echo "Processing original DTSI and fixing potential syntax errors..."
        grep -v "#include" rk3399-am40.dtsi > rk3399-am40-content.txt
        
        # 检查并修复常见语法问题
        sed -i 's/,[ \t]*;/;/g' rk3399-am40-content.txt  # 修复逗号后跟分号的问题
        sed -i 's/}[ \t]*,[ \t]*}/}/g' rk3399-am40-content.txt  # 修复双重结束括号间的逗号
        sed -i 's/};[ \t]*};/};/g' rk3399-am40-content.txt  # 修复重复结束的问题
        
        # 查找并记录潜在的问题行
        echo "Checking for potential syntax issues..."
        grep -n "[^\\];" rk3399-am40-content.txt | grep -v "status = \"okay\"" || true
        
        # 检查是否有未闭合的括号
        echo "Checking for bracket balance..."
        OPEN_BRACKETS=$(grep -o "{" rk3399-am40-content.txt | wc -l)
        CLOSE_BRACKETS=$(grep -o "}" rk3399-am40-content.txt | wc -l)
        echo "Open brackets: $OPEN_BRACKETS, Close brackets: $CLOSE_BRACKETS"
        
        # 检查第481行附近，这是报告的错误位置
        echo "Lines around line 481 (reported error location):"
        if [ -n "$(wc -l < rk3399-am40-content.txt)" ] && [ "$(wc -l < rk3399-am40-content.txt)" -ge 475 ]; then
          sed -n '475,485p' rk3399-am40-content.txt
          
          # 特别修复第481行的问题（如果它存在）
          if [ "$(wc -l < rk3399-am40-content.txt)" -ge 481 ]; then
            LINE_481=$(sed -n '481p' rk3399-am40-content.txt)
            echo "Original line 481: $LINE_481"
            # 尝试修复特定错误，例如缺少分号或多余逗号
            sed -i '481s/,[ \t]*$/;/g' rk3399-am40-content.txt
            sed -i '481s/;[ \t]*;/;/g' rk3399-am40-content.txt
            
            # 特殊处理: 修复第481行的具体语法错误
            sed -i '481s/\([0-9]\),\([0-9]\)/\1, \2/g' rk3399-am40-content.txt  # 在数字间的逗号后添加空格
            sed -i '481s/=[ ]*,/= /g' rk3399-am40-content.txt  # 修复错误的"= ,"结构
            sed -i '481s/[^\][^ ]*;[ ]*;/;/g' rk3399-am40-content.txt  # 修复双分号问题
            sed -i '481s/\([^=]\)=\([^= ]\)/\1= \2/g' rk3399-am40-content.txt  # 在等号两边添加空格
            
            # 特别针对RK3399常见的错误
            sed -i '481s/reg = <0x\([0-9a-f]*\) *\([0-9a-f]*\)>/reg = <0x\1 0x\2>/g' rk3399-am40-content.txt
            
            # 如果有明显的语法错误，也可以手动修改
            # sed -i '481s/错误内容/正确内容/g' rk3399-am40-content.txt
            echo "Modified line 481: $(sed -n '481p' rk3399-am40-content.txt)"
          fi
        fi
        
        # 将修复后的内容附加到修改后的DTSI文件
        cat rk3399-am40-content.txt >> rk3399-am40-modified.dtsi
        
        # 添加最后的语法检查
        echo "Final syntax check (looking for common issues)..."
        grep -n ";[^\"]*;" rk3399-am40-modified.dtsi || echo "No double semicolons found"
        grep -n ",[ \t]*}" rk3399-am40-modified.dtsi || echo "No comma before closing brace found"
        
        # Update includes in am40-user.dts
        echo "/dts-v1/;" > am40-user-modified.dts
        echo "#include \"rk3399-am40-modified.dtsi\"" >> am40-user-modified.dts
        echo "#include \"am40-dp-modified.dtsi\"" >> am40-user-modified.dts
        
        # 处理am40-user.dts中可能的语法错误
        echo "Processing am40-user.dts for syntax errors..."
        grep -v "#include" am40-user.dts | grep -v "/dts-v1/" > am40-user-content.txt
        sed -i 's/,[ \t]*;/;/g' am40-user-content.txt  # 修复逗号后跟分号的问题
        sed -i 's/}[ \t]*,[ \t]*}/}/g' am40-user-content.txt  # 修复双重结束括号间的逗号
        sed -i 's/};[ \t]*};/};/g' am40-user-content.txt  # 修复重复结束的问题
        cat am40-user-content.txt >> am40-user-modified.dts
        
        # Update includes in am40-dp.dtsi
        echo "#include \"rk3399-am40-modified.dtsi\"" > am40-dp-modified.dtsi
        
        # 处理am40-dp.dtsi中可能的语法错误
        echo "Processing am40-dp.dtsi for syntax errors..."
        grep -v "#include" am40-dp.dtsi > am40-dp-content.txt
        sed -i 's/,[ \t]*;/;/g' am40-dp-content.txt  # 修复逗号后跟分号的问题
        sed -i 's/}[ \t]*,[ \t]*}/}/g' am40-dp-content.txt  # 修复双重结束括号间的逗号
        sed -i 's/};[ \t]*};/};/g' am40-dp-content.txt  # 修复重复结束的问题
        cat am40-dp-content.txt >> am40-dp-modified.dtsi
        
        # 显示文件长度，确保内容被正确复制
        echo "File sizes:"
        wc -l rk3399-am40.dtsi rk3399-am40-modified.dtsi am40-user.dts am40-user-modified.dts am40-dp.dtsi am40-dp-modified.dtsi
        
        # Show the modified files
        echo "Modified rk3399-am40.dtsi (first 10 lines):"
        head -n 10 rk3399-am40-modified.dtsi
        
        echo "Modified am40-user.dts (first 10 lines):"
        head -n 10 am40-user-modified.dts
        
        echo "Modified am40-dp.dtsi (first 10 lines):"
        head -n 10 am40-dp-modified.dtsi

    - name: Check DTS files existence
      run: |
        echo "Verifying all necessary DTSI files exist:"
        ls -la arch/arm64/boot/dts/rockchip/*.dtsi
        
        # Check rk3399.dtsi exists
        if [ ! -f "arch/arm64/boot/dts/rockchip/rk3399.dtsi" ]; then
          echo "ERROR: rk3399.dtsi is missing! This is a critical file."
          exit 1
        fi
        
        echo "Include directories structure:"
        find include -type d | sort
        
        echo "Checking header file availability:"
        ls -la include/dt-bindings/pwm/ || echo "PWM header missing"
        ls -la include/dt-bindings/input/ || echo "Input header missing"

    - name: Create direct compilation test
      run: |
        echo "Creating a direct compilation test with minimal dependencies..."
        mkdir -p direct-test
        
        # 创建一个简单的独立DTS文件，不使用heredoc语法
        echo "/dts-v1/;" > direct-test/simple-am40.dts
        echo "" >> direct-test/simple-am40.dts
        echo "/ {" >> direct-test/simple-am40.dts
        echo "    compatible = \"rockchip,rk3399-am40\", \"rockchip,rk3399\";" >> direct-test/simple-am40.dts
        echo "    model = \"Rockchip RK3399 Board rev2 (AM40)\";" >> direct-test/simple-am40.dts
        echo "    " >> direct-test/simple-am40.dts
        echo "    #address-cells = <2>;" >> direct-test/simple-am40.dts
        echo "    #size-cells = <2>;" >> direct-test/simple-am40.dts
        echo "    " >> direct-test/simple-am40.dts
        echo "    chosen { };" >> direct-test/simple-am40.dts
        echo "    " >> direct-test/simple-am40.dts
        echo "    memory@0 {" >> direct-test/simple-am40.dts
        echo "        device_type = \"memory\";" >> direct-test/simple-am40.dts
        echo "        reg = <0x0 0x0 0x0 0x40000000>;" >> direct-test/simple-am40.dts
        echo "    };" >> direct-test/simple-am40.dts
        echo "    " >> direct-test/simple-am40.dts
        echo "    hdmi: hdmi@ff940000 {" >> direct-test/simple-am40.dts
        echo "        compatible = \"rockchip,rk3399-dw-hdmi\";" >> direct-test/simple-am40.dts
        echo "        reg = <0x0 0xff940000 0x0 0x20000>;" >> direct-test/simple-am40.dts
        echo "        status = \"okay\";" >> direct-test/simple-am40.dts
        echo "        ddc-i2c-bus = <&i2c3>;" >> direct-test/simple-am40.dts
        echo "        rockchip,phy-table = <" >> direct-test/simple-am40.dts
        echo "            /* 频率(Hz)    寄存器值   通道值   电参数    */" >> direct-test/simple-am40.dts
        echo "            74250000       0x8009     4        0x272     /* 1080p60 */" >> direct-test/simple-am40.dts
        echo "            165000000      0x802b     4        0x209     /* 2K60 */" >> direct-test/simple-am40.dts
        echo "            297000000      0x8039     4        0x28d     /* 4K60 */" >> direct-test/simple-am40.dts
        echo "            594000000      0x8039     0        0x19d     /* 保留 */" >> direct-test/simple-am40.dts
        echo "            0              0          0        0         /* 结束标记 */" >> direct-test/simple-am40.dts
        echo "        >;" >> direct-test/simple-am40.dts
        echo "    };" >> direct-test/simple-am40.dts
        echo "    " >> direct-test/simple-am40.dts
        echo "    i2c3: i2c@ff150000 {" >> direct-test/simple-am40.dts
        echo "        compatible = \"rockchip,rk3399-i2c\";" >> direct-test/simple-am40.dts
        echo "        reg = <0x0 0xff150000 0x0 0x1000>;" >> direct-test/simple-am40.dts
        echo "        status = \"okay\";" >> direct-test/simple-am40.dts
        echo "        #address-cells = <1>;" >> direct-test/simple-am40.dts
        echo "        #size-cells = <0>;" >> direct-test/simple-am40.dts
        echo "    };" >> direct-test/simple-am40.dts
        echo "};" >> direct-test/simple-am40.dts
        
        echo "Compiling simple DTS file..."
        dtc -I dts -O dtb -o direct-test/simple-am40.dtb direct-test/simple-am40.dts
        
        if [ -f "direct-test/simple-am40.dtb" ]; then
          echo "Simple DTB compilation successful!"
          stat -c %s direct-test/simple-am40.dtb
          # 如果编译成功，使用这个DTB作为我们的输出
          mkdir -p build
          cp direct-test/simple-am40.dtb build/am40-user.dtb
        else
          echo "Simple DTB compilation failed. Trying more simplified approach..."
          
          # 如果简单版本失败，尝试最小版本
          echo "/dts-v1/;" > direct-test/minimal.dts
          echo "" >> direct-test/minimal.dts
          echo "/ {" >> direct-test/minimal.dts
          echo "    compatible = \"rockchip,rk3399-am40\", \"rockchip,rk3399\";" >> direct-test/minimal.dts
          echo "    model = \"Rockchip RK3399 Board rev2 (AM40)\";" >> direct-test/minimal.dts
          echo "};" >> direct-test/minimal.dts
          
          dtc -I dts -O dtb -o build/am40-user.dtb direct-test/minimal.dts
        fi

    - name: Create directory structure for package
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        mkdir -p dtb-package/boot/dtbs/${KERNEL_VERSION}/rockchip
        cp build/am40-user.dtb dtb-package/boot/dtbs/${KERNEL_VERSION}/rockchip/

    - name: Create install script
      run: |
        echo "#!/bin/bash" > dtb-package/install.sh
        echo "set -e" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Script to install AM40 DTB files to Batocera" >> dtb-package/install.sh
        echo "echo \"AM40 RK3399 Batocera DTB installer for kernel 6.14.5\"" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Check if running as root" >> dtb-package/install.sh
        echo "if [ \"\$(id -u)\" -ne 0 ]; then" >> dtb-package/install.sh
        echo "    echo \"This script must be run as root\" " >> dtb-package/install.sh
        echo "    exit 1" >> dtb-package/install.sh
        echo "fi" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Configuration" >> dtb-package/install.sh
        echo "BATOCERA_BOOT=\"/boot\"" >> dtb-package/install.sh
        echo "BATOCERA_DTB_DIR=\"\$BATOCERA_BOOT/boot/dtbs\"" >> dtb-package/install.sh
        echo "KERNEL_VERSION=\"6.14.5\"" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Find correct DTB directory based on kernel version" >> dtb-package/install.sh
        echo "if [ -d \"\$BATOCERA_DTB_DIR/\$KERNEL_VERSION\" ]; then" >> dtb-package/install.sh
        echo "    DTB_VERSION_DIR=\"\$BATOCERA_DTB_DIR/\$KERNEL_VERSION\"" >> dtb-package/install.sh
        echo "elif [ -d \"\$BATOCERA_DTB_DIR/6.14\" ]; then" >> dtb-package/install.sh
        echo "    DTB_VERSION_DIR=\"\$BATOCERA_DTB_DIR/6.14\"" >> dtb-package/install.sh
        echo "    KERNEL_VERSION=\"6.14\"" >> dtb-package/install.sh
        echo "else" >> dtb-package/install.sh
        echo "    echo \"Could not find kernel 6.14.5 DTB directory. Are you using the correct kernel version?\"" >> dtb-package/install.sh
        echo "    echo \"Available kernel DTB directories:\"" >> dtb-package/install.sh
        echo "    ls -la \"\$BATOCERA_DTB_DIR\"" >> dtb-package/install.sh
        echo "    exit 1" >> dtb-package/install.sh
        echo "fi" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Create the rockchip directory if it does not exist" >> dtb-package/install.sh
        echo "ROCKCHIP_DTB_DIR=\"\$DTB_VERSION_DIR/rockchip\"" >> dtb-package/install.sh
        echo "mkdir -p \"\$ROCKCHIP_DTB_DIR\"" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Backup existing DTB files" >> dtb-package/install.sh
        echo "echo \"Backing up existing DTB files...\"" >> dtb-package/install.sh
        echo "if [ -f \"\$ROCKCHIP_DTB_DIR/am40-user.dtb\" ]; then" >> dtb-package/install.sh
        echo "    cp \"\$ROCKCHIP_DTB_DIR/am40-user.dtb\" \"\$ROCKCHIP_DTB_DIR/am40-user.dtb.backup\"" >> dtb-package/install.sh
        echo "fi" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Copy the custom DTB file" >> dtb-package/install.sh
        echo "echo \"Installing custom DTB file...\"" >> dtb-package/install.sh
        echo "cp \"boot/dtbs/\$KERNEL_VERSION/rockchip/am40-user.dtb\" \"\$ROCKCHIP_DTB_DIR/\"" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "# Update the extlinux.conf file if needed" >> dtb-package/install.sh
        echo "EXTLINUX_CONF=\"\$BATOCERA_BOOT/extlinux/extlinux.conf\"" >> dtb-package/install.sh
        echo "if [ -f \"\$EXTLINUX_CONF\" ]; then" >> dtb-package/install.sh
        echo "    echo \"Updating boot configuration...\"" >> dtb-package/install.sh
        echo "    # Check if the FDT line is already set to our DTB" >> dtb-package/install.sh
        echo "    if grep -q \"FDT /boot/dtbs/.*/rockchip/am40-user.dtb\" \"\$EXTLINUX_CONF\"; then" >> dtb-package/install.sh
        echo "        echo \"Boot configuration already set to use am40-user.dtb\"" >> dtb-package/install.sh
        echo "    else" >> dtb-package/install.sh
        echo "        # Make a backup of the original file" >> dtb-package/install.sh
        echo "        cp \"\$EXTLINUX_CONF\" \"\$EXTLINUX_CONF.backup\"" >> dtb-package/install.sh
        echo "        " >> dtb-package/install.sh
        echo "        # Update the FDT line to use our DTB" >> dtb-package/install.sh
        echo "        sed -i \"s|FDT .*|FDT /boot/dtbs/\$KERNEL_VERSION/rockchip/am40-user.dtb|g\" \"\$EXTLINUX_CONF\"" >> dtb-package/install.sh
        echo "        " >> dtb-package/install.sh
        echo "        echo \"Updated boot configuration to use am40-user.dtb\"" >> dtb-package/install.sh
        echo "    fi" >> dtb-package/install.sh
        echo "fi" >> dtb-package/install.sh
        echo "" >> dtb-package/install.sh
        echo "echo \"Installation complete. Please reboot your system for changes to take effect.\"" >> dtb-package/install.sh
        echo "echo \"If the system fails to boot, you can restore the backup DTB files by booting in recovery mode.\"" >> dtb-package/install.sh
        chmod +x dtb-package/install.sh

    - name: Create README
      run: |
        echo "# AM40 RK3399 DTB files for Batocera Linux 6.14.5" > dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "This package contains the custom Device Tree Binary (DTB) files for running Batocera Linux with kernel 6.14.5 on the AM40 RK3399 board." >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "## Installation" >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "1. Extract this package to a USB drive or directly to your Batocera system" >> dtb-package/README.md
        echo "2. Run the install script as root:" >> dtb-package/README.md
        echo "   ```" >> dtb-package/README.md
        echo "   chmod +x install.sh" >> dtb-package/README.md
        echo "   sudo ./install.sh" >> dtb-package/README.md
        echo "   ```" >> dtb-package/README.md
        echo "3. Reboot your system" >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "## Manual Installation" >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "If you prefer to install manually:" >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "1. Copy the DTB file to the correct location:" >> dtb-package/README.md
        echo "   ```" >> dtb-package/README.md
        echo "   sudo cp boot/dtbs/6.14.5/rockchip/am40-user.dtb /boot/boot/dtbs/6.14.5/rockchip/" >> dtb-package/README.md
        echo "   ```" >> dtb-package/README.md
        echo "   " >> dtb-package/README.md
        echo "2. Update your boot configuration in \`/boot/extlinux/extlinux.conf\` to use the new DTB:" >> dtb-package/README.md
        echo "   ```" >> dtb-package/README.md
        echo "   FDT /boot/dtbs/6.14.5/rockchip/am40-user.dtb" >> dtb-package/README.md
        echo "   ```" >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "3. Reboot your system" >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "## Recovery" >> dtb-package/README.md
        echo "" >> dtb-package/README.md
        echo "If your system fails to boot after installing these files, boot in recovery mode and restore the original DTB files from the backup." >> dtb-package/README.md

    - name: Create DTB package
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        cd dtb-package
        tar -czf ../build/am40-dtb-${KERNEL_VERSION}.tar.gz .
        cd ..
        ls -la build/

    - name: Upload DTB artifacts
      uses: actions/upload-artifact@v4
      with:
        name: am40-dtb-files
        path: |
          build/am40-user.dtb
          build/am40-dtb-*.tar.gz
        retention-days: 7

    - name: Create Release
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: AM40 DTB files for kernel ${{ github.event.inputs.kernel_version || '6.14.5' }}
        tag_name: dtb-v${{ github.event.inputs.kernel_version || '6.14.5' }}
        draft: false
        prerelease: false
        files: |
          build/am40-user.dtb
          build/am40-dtb-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create test directory and simplified DTS for testing
      run: |
        echo "Creating simplified test DTS with fixed source files..."
        mkdir -p test-build
        
        # 创建一个完整的测试DTS文件，包含所有必要节点
        echo "/dts-v1/;" > test-build/test.dts
        echo "" >> test-build/test.dts
        echo "/ {" >> test-build/test.dts
        echo "    compatible = \"rockchip,rk3399-am40\", \"rockchip,rk3399\";" >> test-build/test.dts
        echo "    model = \"Rockchip RK3399 Board rev2 (AM40)\";" >> test-build/test.dts
        echo "" >> test-build/test.dts
        echo "    /* 先定义HDMI节点，这样才能在后面引用它 */" >> test-build/test.dts
        echo "    hdmi: hdmi@ff940000 {" >> test-build/test.dts
        echo "        compatible = \"rockchip,rk3399-dw-hdmi\";" >> test-build/test.dts
        echo "        reg = <0x0 0xff940000 0x0 0x20000>;" >> test-build/test.dts
        echo "    };" >> test-build/test.dts
        echo "" >> test-build/test.dts
        echo "    /* 定义I2C3节点，这样HDMI节点可以引用它 */" >> test-build/test.dts
        echo "    i2c3: i2c@ff150000 {" >> test-build/test.dts
        echo "        compatible = \"rockchip,rk3399-i2c\";" >> test-build/test.dts
        echo "        reg = <0x0 0xff150000 0x0 0x1000>;" >> test-build/test.dts
        echo "        status = \"okay\";" >> test-build/test.dts
        echo "        #address-cells = <1>;" >> test-build/test.dts
        echo "        #size-cells = <0>;" >> test-build/test.dts
        echo "    };" >> test-build/test.dts
        echo "};" >> test-build/test.dts
        echo "" >> test-build/test.dts
        
        # 现在我们可以使用&hdmi引用之前定义的节点
        echo "/* 使用扩展语法修改先前定义的hdmi节点 */" >> test-build/test.dts
        echo "&hdmi {" >> test-build/test.dts
        echo "    pinctrl-names = \"default\";" >> test-build/test.dts
        echo "    #address-cells = <1>;" >> test-build/test.dts
        echo "    #size-cells = <0>;" >> test-build/test.dts
        echo "    #sound-dai-cells = <0>;" >> test-build/test.dts
        echo "    ddc-i2c-bus = <&i2c3>;" >> test-build/test.dts
        echo "    ddc-i2c-scl-high-time-ns = <9625>;" >> test-build/test.dts
        echo "    ddc-i2c-scl-low-time-ns = <10000>;" >> test-build/test.dts
        echo "    rockchip,hdmi_video_source = <0>;" >> test-build/test.dts
        echo "    rockchip,phy-table = <" >> test-build/test.dts
        echo "        /* 频率(Hz)   Reg0xXX   通道  电气参数 */" >> test-build/test.dts
        echo "        74250000    0x8009    4     0x272     /* 1080p60 */" >> test-build/test.dts
        echo "        165000000   0x802b    4     0x209     /* 2K60 */" >> test-build/test.dts
        echo "        297000000   0x8039    4     0x28d     /* 4K60 */" >> test-build/test.dts
        echo "        594000000   0x8039    0     0x19d     /* 保留 */" >> test-build/test.dts
        echo "        0           0         0     0         /* 结束标志 */" >> test-build/test.dts
        echo "    >;" >> test-build/test.dts
        echo "    status = \"okay\";" >> test-build/test.dts
        echo "};" >> test-build/test.dts
        
        # 尝试编译测试DTS
        echo "Compiling test DTS file..."
        dtc -I dts -O dtb -o test-build/test.dtb test-build/test.dts
        
        # 检查编译结果
        if [ -f "test-build/test.dtb" ]; then
          echo "Test compilation succeeded! HDMI section syntax is correct."
          stat -c %s test-build/test.dtb
        else
          echo "Test compilation failed. Still have syntax issues."
          exit 1
        fi 
