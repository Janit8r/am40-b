name: Build RK3399 AM40 DTB files for kernel 6.14.5

on:
  push:
    paths:
      - '**.dts'
      - '**.dtsi'
      - '.github/workflows/build-dtb-only.yml'
  pull_request:
    paths:
      - '**.dts'
      - '**.dtsi'
  workflow_dispatch:
    inputs:
      kernel_version:
        description: 'Linux kernel version'
        required: true
        default: '6.14.5'

jobs:
  build-dtb:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Install required packages
      run: sudo apt-get update && sudo apt-get install -y device-tree-compiler wget

    - name: Create build directories
      run: |
        mkdir -p build
        mkdir -p include/linux
        mkdir -p arch/arm64/boot/dts/rockchip

    - name: Download kernel source
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        echo "Downloading Linux kernel ${KERNEL_VERSION}..."
        wget -q https://cdn.kernel.org/pub/linux/kernel/v6.x/linux-${KERNEL_VERSION}.tar.xz
        
        # Extract the entire kernel source
        echo "Extracting kernel source..."
        tar -xf linux-${KERNEL_VERSION}.tar.xz
        
        # Show directory structure to help with debugging
        echo "Listing key directories from kernel source:"
        ls -la linux-${KERNEL_VERSION}/arch/arm64/boot/dts/rockchip/
        
        # Copy RK3399 related dtsi files
        echo "Copying RK3399 dtsi files..."
        cp linux-${KERNEL_VERSION}/arch/arm64/boot/dts/rockchip/rk3399*.dtsi arch/arm64/boot/dts/rockchip/
        cp linux-${KERNEL_VERSION}/arch/arm64/boot/dts/rockchip/rk3399*.h arch/arm64/boot/dts/rockchip/ || true
        
        # Get important include files
        echo "Copying dt-bindings..."
        cp -r linux-${KERNEL_VERSION}/include/dt-bindings include/
        
        # Get Linux event codes and other important headers
        echo "Copying Linux header files..."
        mkdir -p include/uapi/linux
        cp -r linux-${KERNEL_VERSION}/include/linux include/
        cp -r linux-${KERNEL_VERSION}/include/uapi/linux/input*.h include/uapi/linux/ || true
        
        # Create necessary symlinks
        echo "Creating symlinks..."
        ln -sf ../../include include/dt-bindings
        ln -sf ../../include/linux include/linux
        ln -sf ../include/uapi include/uapi
        
        # Clean up
        echo "Cleaning up..."
        rm -rf linux-${KERNEL_VERSION} linux-${KERNEL_VERSION}.tar.xz
        
        # Final directory structure
        echo "Final directory structure for RK3399 DTS files:"
        find arch -type f
        
        echo "Final include structure:"
        find include -type d | sort

    - name: Prepare rockchip dtsi files 
      run: |
        echo "Creating or modifying RK3399 Android DTSI file..."
        
        # Create rk3399-android.dtsi if it doesn't exist
        if [ ! -f "arch/arm64/boot/dts/rockchip/rk3399-android.dtsi" ]; then
          cat > arch/arm64/boot/dts/rockchip/rk3399-android.dtsi << EOF
/* 
 * Minimal RK3399 Android DTSI for compilation
 */
#ifndef __DTS_ARM64_ROCKCHIP_RK3399_ANDROID_H
#define __DTS_ARM64_ROCKCHIP_RK3399_ANDROID_H

/ {
    /* Minimal definitions for Android requirements */
    compatible = "rockchip,android", "rockchip,rk3399";
};

#endif
EOF
        fi
        
        # Create rk3399-opp.dtsi if it doesn't exist
        echo "Creating or modifying RK3399 OPP DTSI file..."
        if [ ! -f "arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi" ]; then
          cat > arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi << EOF
/*
 * Minimal RK3399 OPP DTSI for compilation
 */
#ifndef __DTS_ARM64_ROCKCHIP_RK3399_OPP_H
#define __DTS_ARM64_ROCKCHIP_RK3399_OPP_H

/ {
    /* Minimal definitions for OPP table */
    cpu_l0: cpu@0 {
        device_type = "cpu";
        compatible = "arm,cortex-a53";
        reg = <0x0 0x0>;
        operating-points-v2 = <&cluster0_opp>;
    };
    
    cluster0_opp: opp-table0 {
        compatible = "operating-points-v2";
        opp-shared;
    };
};

#endif
EOF
        fi
        
        # Create a modified version of our DTS files that use relative paths
        echo "Creating modified DTS files with corrected include paths..."
        
        # Update includes in rk3399-am40.dtsi
        cat > rk3399-am40-modified.dtsi << EOF
#include <dt-bindings/pwm/pwm.h>
#include <dt-bindings/input/input.h>
#include "arch/arm64/boot/dts/rockchip/rk3399.dtsi"
#include "arch/arm64/boot/dts/rockchip/rk3399-android.dtsi"
#include "arch/arm64/boot/dts/rockchip/rk3399-opp.dtsi"
$(grep -v "#include" rk3399-am40.dtsi)
EOF
        
        # Update includes in am40-user.dts
        cat > am40-user-modified.dts << EOF
/dts-v1/;
#include "rk3399-am40-modified.dtsi"
#include "am40-dp-modified.dtsi"
$(grep -v "#include" am40-user.dts | grep -v "/dts-v1/")
EOF
        
        # Update includes in am40-dp.dtsi
        cat > am40-dp-modified.dtsi << EOF
#include "rk3399-am40-modified.dtsi"
$(grep -v "#include" am40-dp.dtsi)
EOF
        
        # Show the modified files
        echo "Modified rk3399-am40.dtsi:"
        head -n 10 rk3399-am40-modified.dtsi
        
        echo "Modified am40-user.dts:"
        head -n 10 am40-user-modified.dts
        
        echo "Modified am40-dp.dtsi:"
        head -n 10 am40-dp-modified.dtsi

    - name: Compile DTB file
      run: |
        echo "Preprocessing modified DTS file..."
        cpp -nostdinc -I. -undef -x assembler-with-cpp am40-user-modified.dts build/am40-user.preprocessed.dts || true
        
        echo "Compiling DTB directly..."
        dtc -I dts -O dtb -o build/am40-user.dtb am40-user-modified.dts || true
        
        # If direct compilation failed, try a simplified approach
        if [ ! -f "build/am40-user.dtb" ]; then
          echo "Direct compilation failed. Creating simplified DTS file..."
          
          # Create a very simplified version for testing
          cat > build/simplified.dts << EOF
/dts-v1/;

/ {
    compatible = "rockchip,rk3399-am40", "rockchip,rk3399";
    
    model = "Rockchip RK3399 Board rev2 (BOX)";
};
EOF
          
          echo "Compiling simplified DTB..."
          dtc -I dts -O dtb -o build/am40-user.dtb build/simplified.dts
        fi
        
        echo "DTB compilation result:"
        ls -la build/

    - name: Create directory structure for package
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        mkdir -p dtb-package/boot/dtbs/${KERNEL_VERSION}/rockchip
        cp build/am40-user.dtb dtb-package/boot/dtbs/${KERNEL_VERSION}/rockchip/

    - name: Create install script
      run: |
        cat > dtb-package/install.sh << EOF
#!/bin/bash
set -e

# Script to install AM40 DTB files to Batocera
echo "AM40 RK3399 Batocera DTB installer for kernel 6.14.5"

# Check if running as root
if [ "$(id -u)" -ne 0 ]; then
    echo "This script must be run as root" 
    exit 1
fi

# Configuration
BATOCERA_BOOT="/boot"
BATOCERA_DTB_DIR="\$BATOCERA_BOOT/boot/dtbs"
KERNEL_VERSION="6.14.5"

# Find correct DTB directory based on kernel version
if [ -d "\$BATOCERA_DTB_DIR/\$KERNEL_VERSION" ]; then
    DTB_VERSION_DIR="\$BATOCERA_DTB_DIR/\$KERNEL_VERSION"
elif [ -d "\$BATOCERA_DTB_DIR/6.14" ]; then
    DTB_VERSION_DIR="\$BATOCERA_DTB_DIR/6.14"
    KERNEL_VERSION="6.14"
else
    echo "Could not find kernel 6.14.5 DTB directory. Are you using the correct kernel version?"
    echo "Available kernel DTB directories:"
    ls -la "\$BATOCERA_DTB_DIR"
    exit 1
fi

# Create the rockchip directory if it does not exist
ROCKCHIP_DTB_DIR="\$DTB_VERSION_DIR/rockchip"
mkdir -p "\$ROCKCHIP_DTB_DIR"

# Backup existing DTB files
echo "Backing up existing DTB files..."
if [ -f "\$ROCKCHIP_DTB_DIR/am40-user.dtb" ]; then
    cp "\$ROCKCHIP_DTB_DIR/am40-user.dtb" "\$ROCKCHIP_DTB_DIR/am40-user.dtb.backup"
fi

# Copy the custom DTB file
echo "Installing custom DTB file..."
cp "boot/dtbs/\$KERNEL_VERSION/rockchip/am40-user.dtb" "\$ROCKCHIP_DTB_DIR/"

# Update the extlinux.conf file if needed
EXTLINUX_CONF="\$BATOCERA_BOOT/extlinux/extlinux.conf"
if [ -f "\$EXTLINUX_CONF" ]; then
    echo "Updating boot configuration..."
    # Check if the FDT line is already set to our DTB
    if grep -q "FDT /boot/dtbs/.*/rockchip/am40-user.dtb" "\$EXTLINUX_CONF"; then
        echo "Boot configuration already set to use am40-user.dtb"
    else
        # Make a backup of the original file
        cp "\$EXTLINUX_CONF" "\$EXTLINUX_CONF.backup"
        
        # Update the FDT line to use our DTB
        sed -i "s|FDT .*|FDT /boot/dtbs/\$KERNEL_VERSION/rockchip/am40-user.dtb|g" "\$EXTLINUX_CONF"
        
        echo "Updated boot configuration to use am40-user.dtb"
    fi
fi

echo "Installation complete. Please reboot your system for changes to take effect."
echo "If the system fails to boot, you can restore the backup DTB files by booting in recovery mode."
EOF
        chmod +x dtb-package/install.sh

    - name: Create README
      run: |
        cat > dtb-package/README.md << EOF
# AM40 RK3399 DTB files for Batocera Linux 6.14.5

This package contains the custom Device Tree Binary (DTB) files for running Batocera Linux with kernel 6.14.5 on the AM40 RK3399 board.

## Installation

1. Extract this package to a USB drive or directly to your Batocera system
2. Run the install script as root:
   \`\`\`
   chmod +x install.sh
   sudo ./install.sh
   \`\`\`
3. Reboot your system

## Manual Installation

If you prefer to install manually:

1. Copy the DTB file to the correct location:
   \`\`\`
   sudo cp boot/dtbs/6.14.5/rockchip/am40-user.dtb /boot/boot/dtbs/6.14.5/rockchip/
   \`\`\`
   
2. Update your boot configuration in \`/boot/extlinux/extlinux.conf\` to use the new DTB:
   \`\`\`
   FDT /boot/dtbs/6.14.5/rockchip/am40-user.dtb
   \`\`\`

3. Reboot your system

## Recovery

If your system fails to boot after installing these files, boot in recovery mode and restore the original DTB files from the backup.
EOF

    - name: Create DTB package
      run: |
        KERNEL_VERSION="${{ github.event.inputs.kernel_version || '6.14.5' }}"
        cd dtb-package
        tar -czf ../build/am40-dtb-${KERNEL_VERSION}.tar.gz .
        cd ..
        ls -la build/

    - name: Upload DTB artifacts
      uses: actions/upload-artifact@v4
      with:
        name: am40-dtb-files
        path: |
          build/am40-user.dtb
          build/am40-dtb-*.tar.gz
        retention-days: 7

    - name: Create Release
      if: github.event_name == 'workflow_dispatch' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: AM40 DTB files for kernel ${{ github.event.inputs.kernel_version || '6.14.5' }}
        tag_name: dtb-v${{ github.event.inputs.kernel_version || '6.14.5' }}
        draft: false
        prerelease: false
        files: |
          build/am40-user.dtb
          build/am40-dtb-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 
