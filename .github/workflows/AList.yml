name: AList WASM for Cloudflare Workers - Build & Document

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging
          - development
      deploy:
        description: 'Deploy to Cloudflare Workers'
        type: boolean
        required: false
        default: false
      kv_namespace_id:
        description: 'Cloudflare KV namespace ID'
        required: false
        default: ''
      r2_bucket:
        description: 'Cloudflare R2 bucket name'
        required: false
        default: 'alist-storage'
      source_url:
        description: 'Source code URL'
        required: false
        default: 'https://raw.githubusercontent.com/Janit8r/am40-b/refs/heads/main/alist-main.zip'
      generate_docs:
        description: 'Generate documentation'
        type: boolean
        required: false
        default: true

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Set up workspace
        run: |
          mkdir -p alist-workspace dist

      - name: Download or clone source
        run: |
          echo "Source URL: ${{ github.event.inputs.source_url }}"
          if [[ "${{ github.event.inputs.source_url }}" =~ \.zip$ ]]; then
            wget -O alist-source.zip "${{ github.event.inputs.source_url }}"
            unzip -q alist-source.zip -d alist-workspace
          else
            cd alist-workspace
            git clone "${{ github.event.inputs.source_url }}" alist-main
            cd ..
          fi
          echo "Directory contents:"
          ls -la alist-workspace
          ls -la alist-workspace/alist-main || echo "alist-main directory not found"

      - name: Fix go.mod file (if exists)
        run: |
          if [ -f alist-workspace/alist-main/go.mod ]; then
            sed -i 's/go 1\.[0-9]\+/go 1.20/' alist-workspace/alist-main/go.mod
            echo "Fixed go.mod:"
            head -5 alist-workspace/alist-main/go.mod
          else
            echo "go.mod not found!"
          fi

      - name: Set up Go 1.20
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Set up Go mod cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Verify Go version
        run: go version

      - name: Install TinyGo 0.28.1
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v0.28.1/tinygo_0.28.1_amd64.deb
          sudo dpkg -i tinygo_0.28.1_amd64.deb
          tinygo version

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Prepare Go modules
        working-directory: alist-workspace/alist-main
        run: |
          go mod tidy || echo "go mod tidy failed"
          go mod vendor || echo "go mod vendor failed"

      - name: Build WASM module
        working-directory: alist-workspace/alist-main
        run: |
          if [ -f ./wasm/main.go ]; then
            echo "Building WebAssembly module..."
            tinygo build \
              -o ../../dist/alist.wasm \
              -target wasm \
              -no-debug \
              -opt=2 \
              -gc=leaking \
              -scheduler=none \
              ./wasm/main.go
            cp ./wasm/worker.js ../../dist/index.js
          else
            echo "main.go not found! Skipping build."
            exit 1
          fi

      - name: Check WASM file
        run: |
          ls -lh dist/
          if [ ! -f dist/alist.wasm ]; then
            echo "alist.wasm not found!"
            exit 1
          fi

      - name: Generate wrangler.toml
        run: |
          cat > dist/wrangler.toml << EOL
          name = "alist-worker-${{ github.event.inputs.environment }}"
          main = "index.js"
          compatibility_date = "2023-05-15"
          usage_model = "bundled"

          [build]
          command = "echo 'Using pre-built files'"

          [wasm_modules]
          alist = "alist.wasm"

          [env.${{ github.event.inputs.environment }}]
          workers_dev = true
          EOL

          if [ -n "${{ github.event.inputs.kv_namespace_id }}" ]; then
            cat >> dist/wrangler.toml << EOL

          [env.${{ github.event.inputs.environment }}.kv_namespaces]
          [[env.${{ github.event.inputs.environment }}.kv_namespaces]]
          binding = "ALIST_KV"
          id = "${{ github.event.inputs.kv_namespace_id }}"
          EOL
          fi

          if [ -n "${{ github.event.inputs.r2_bucket }}" ]; then
            cat >> dist/wrangler.toml << EOL

          [env.${{ github.event.inputs.environment }}.r2_buckets]
          [[env.${{ github.event.inputs.environment }}.r2_buckets]]
          binding = "ALIST_R2"
          bucket_name = "${{ github.event.inputs.r2_bucket }}"
          EOL
          fi

          cat >> dist/wrangler.toml << EOL

          [placement]
          mode = "smart"

          [limits]
          cpu_ms = 200
          memory_mb = 128
          EOL

          cat dist/wrangler.toml

      - name: Deploy to Cloudflare Workers (if enabled)
        if: ${{ github.event.inputs.deploy == 'true' }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
        run: |
          cd dist
          wrangler deploy --env ${{ github.event.inputs.environment }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: alist-worker-${{ github.event.inputs.environment }}
          path: dist/
          retention-days: 7

  generate-documentation:
    needs: build-and-deploy
    if: ${{ github.event.inputs.generate_docs == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - name: Download source code
        run: |
          mkdir -p alist-workspace
          wget -O alist-source.zip "${{ github.event.inputs.source_url }}"
          unzip -q alist-source.zip -d alist-workspace || echo "Skip unzip if git"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install Context7 CLI
        run: npm install -g @upstash/context7-cli

      - name: Configure Context7
        run: |
          mkdir -p $HOME/.context7
          echo '{
            "mcpServers": {
              "context7": {
                "command": "npx",
                "args": ["-y", "@upstash/context7-mcp@latest"]
              }
            }
          }' > $HOME/.context7/config.json

      - name: Create docs directory
        run: mkdir -p docs

      - name: Generate documentation
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          context7 analyze \
            --query "Generate comprehensive documentation for the AList WASM Cloudflare Worker implementation" \
            --paths "alist-workspace/alist-main/wasm/" \
            --output-format "md" \
            --output "docs/full-documentation.md"

          context7 analyze \
            --query "Generate API documentation for the Alist WASM Cloudflare Worker implementation" \
            --paths "alist-workspace/alist-main/wasm/" \
            --focus-on "main.go,worker.js" \
            --output-format "md" \
            --output "docs/api-reference.md"

          context7 analyze \
            --query "Create a detailed architecture diagram showing how Alist works on Cloudflare Workers using WebAssembly" \
            --paths "alist-workspace/alist-main/wasm/" \
            --output-format "md" \
            --output "docs/architecture-diagram.md"

          context7 analyze \
            --query "Create a step-by-step deployment guide for Alist on Cloudflare Workers" \
            --paths "alist-workspace/alist-main/wasm/" \
            --output-format "md" \
            --output "docs/deployment-guide.md"

      - name: Combine docs index
        run: |
          echo "# AList WebAssembly for Cloudflare Workers" > docs/index.md
          echo "## Documentation generated on $(date)" >> docs/index.md
          echo "" >> docs/index.md
          echo "## Table of Contents" >> docs/index.md
          echo "1. [Architecture Diagram](architecture-diagram.md)" >> docs/index.md
          echo "2. [API Reference](api-reference.md)" >> docs/index.md
          echo "3. [Deployment Guide](deployment-guide.md)" >> docs/index.md
          echo "4. [Full Documentation](full-documentation.md)" >> docs/index.md

      - name: Upload documentation
        uses: actions/upload-artifact@v4
        with:
          name: alist-wasm-documentation
          path: docs/
          retention-days: 30
