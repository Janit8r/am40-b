name: Build AList WASM and Deploy to Cloudflare

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Cloudflare Environment (production or preview)'
        required: true
        default: 'preview'
        type: choice
        options:
          - preview
          - production
      source_zip_url:
        description: 'URL to the source code zip file'
        required: true
        default: 'https://raw.githubusercontent.com/Janit8r/am40-b/refs/heads/main/alist-main.zip'
      deploy:
        description: 'Deploy to Cloudflare Workers?'
        required: true
        type: boolean
        default: false
      kv_namespaces:
        description: 'KV Namespaces (JSON format, e.g., [{"binding":"KV_BINDING","id":"kv_id"}])'
        required: false
        default: '[]'
      r2_buckets:
        description: 'R2 Buckets (JSON format, e.g., [{"binding":"R2_BINDING","bucket_name":"r2_bucket"}])'
        required: false
        default: '[]'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code (for workflow file)
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23' # Use Go 1.23 for source compatibility
          cache: false # Disable Go caching

      - name: Install TinyGo
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v0.37.0/tinygo_0.37.0_amd64.deb
          sudo dpkg -i tinygo_0.37.0_amd64.deb
          rm tinygo_0.37.0_amd64.deb
          tinygo version

      - name: Install Wrangler
        run: npm install -g wrangler

      - name: Create workspace directory
        run: mkdir alist-workspace

      - name: Download and Extract Source Code
        working-directory: alist-workspace
        run: |
          echo "Downloading source from ${{ github.event.inputs.source_zip_url }}"
          curl -L "${{ github.event.inputs.source_zip_url }}" -o source.zip
          unzip source.zip -d .
          # Assuming the zip extracts to a directory named 'alist-main', adjust if needed
          if [ -d "alist-main" ]; then
            echo "Source extracted to alist-main"
          else
            echo "Error: Expected directory 'alist-main' not found after extraction."
            # Attempt to find the correct directory if zip structure is different
            EXTRACTED_DIR=$(find . -maxdepth 1 -mindepth 1 -type d ! -name '.*' -print -quit)
            if [ -n "$EXTRACTED_DIR" ] && [ -f "$EXTRACTED_DIR/go.mod" ]; then
              echo "Found potential source directory: $EXTRACTED_DIR. Renaming to alist-main."
              mv "$EXTRACTED_DIR" alist-main
            else
              echo "Could not determine the correct source directory."
              ls -la . # List contents for debugging
              exit 1
            fi
          fi
          ls -la alist-main # Verify contents

      - name: Adjust go.mod version
        working-directory: alist-workspace/alist-main
        run: |
          echo "Adjusting go.mod to go 1.23..."
          sed -i 's/^go .*/go 1.23/' go.mod
          cat go.mod # Verify change

      - name: Set up TinyGo environment variables
        run: |
          echo "TINYGOROOT=$(tinygo env TINYGOROOT)" >> $GITHUB_ENV
          echo "GOROOT_FINAL=$(tinygo env GOROOT_FINAL)" >> $GITHUB_ENV
          echo "PATH=$PATH:$(tinygo env TINYGOROOT)/bin" >> $GITHUB_ENV

      - name: Get Go dependencies and vendor
        working-directory: alist-workspace/alist-main
        run: |
          echo "Running go mod tidy..."
          go mod tidy
          echo "Running go mod vendor..."
          go mod vendor

      - name: Add build constraints to problematic vendor files after go mod vendor
        # This step MUST run *after* go mod vendor
        working-directory: alist-workspace/alist-main
        run: |
          echo "Adding build constraints to problematic vendor files after go mod vendor..."
          FILES_TO_PATCH=(
            # Previous ones
            "vendor/github.com/gin-gonic/gin/recovery.go"
            "vendor/github.com/go-resty/resty/v2/trace.go"
            "vendor/golang.org/x/net/publicsuffix/list.go"
            "vendor/github.com/aws/aws-sdk-go/aws/client/logger.go"
            "vendor/github.com/go-resty/resty/v2/resty.go"
            "vendor/golang.org/x/net/internal/httpcommon/request.go"
            "vendor/github.com/go-resty/resty/v2/util_curl.go"
            "vendor/golang.org/x/net/http2/transport.go"
            "vendor/gorm.io/driver/sqlite/sqlite.go"
            "pkg/utils/file.go"
            # Removed mapstructure patches as they caused issues
            # "vendor/github.com/mitchellh/mapstructure/mapstructure.go"
            # "vendor/github.com/mitchellh/mapstructure/decode_hooks.go"
            # New: Add constraint to go-webauthn instead
            "vendor/github.com/go-webauthn/webauthn/metadata/decode.go"
          )
          for f in "${FILES_TO_PATCH[@]}"; do
            if [ -f "$f" ]; then
              echo "Patching $f"
              # Use sed's insert command '1i' to add the constraint at the first line
              sed -i '1i //go:build !js || !wasm' "$f"
              # Verify the change (optional)
              # head -n 3 "$f"
            else
              echo "Warning: File not found, skipping patch: $f"
            fi
          done

      - name: Build WebAssembly module using TinyGo
        working-directory: alist-workspace/alist-main
        run: |
          echo "Building WebAssembly module using TinyGo"
          # Use -tags tinygo.wasm although it might not always help
          # Use -no-debug to potentially reduce size and avoid debug-related issues
          tinygo build -o ../alist.wasm -target=wasm -tags tinygo.wasm -no-debug ./
          ls -lh ../alist.wasm # Check if the file was created and its size

      - name: Set up Cloudflare configuration
        if: github.event.inputs.deploy == 'true'
        working-directory: alist-workspace
        run: |
          echo "Creating wrangler.toml for ${{ github.event.inputs.environment }} deployment"
          # Basic wrangler.toml structure
          cat <<EOF > wrangler.toml
          name = "alist-wasm-${{ github.event.inputs.environment }}"
          main = "alist.wasm" # Assuming the entry point is the wasm module itself
          compatibility_date = "$(date +'%Y-%m-%d')"
          wasm_modules = { MAIN = "alist.wasm" }

          [build]
          command = "" # No build command needed as we pre-built

          # Add environment-specific settings
          [env.${{ github.event.inputs.environment }}]
          # Add routes or other env-specific configs here if needed
          # route = "your-worker-url.com/*"
          kv_namespaces = ${{ github.event.inputs.kv_namespaces }}
          r2_buckets = ${{ github.event.inputs.r2_buckets }}

          EOF
          echo "Generated wrangler.toml:"
          cat wrangler.toml

      - name: Deploy to Cloudflare Workers
        if: github.event.inputs.deploy == 'true'
        working-directory: alist-workspace
        run: |
          echo "Deploying to Cloudflare environment: ${{ github.event.inputs.environment }}"
          wrangler deploy --env ${{ github.event.inputs.environment }}
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
